services:
  kafka:
    image: bitnami/kafka:3.7.0
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_CFG_BROKER_ID=0
      - KAFKA_CFG_NUM_PARTITIONS=3
      - KAFKA_CFG_DEFAULT_REPLICATION_FACTOR=1
      - ALLOW_PLAINTEXT_LISTENER=yes
    mem_limit: 2g
    restart: on-failure
    networks:
      - kafka-net
    volumes:
      - kafka-data:/bitnami/kafka
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 20s
      retries: 20
      start_period: 120s
  producer:
    build:
      context: .
      dockerfile: producer/Dockerfile.producer
    volumes:
      - ./data:/kafka-ticks-visualizer/data
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-net
    restart: on-failure
    healthcheck:
      test: ["CMD", "python", "-c", "import confluent_kafka"]
      interval: 10s
      timeout: 10s
      retries: 15
      start_period: 30s
  aggregator:
    build:
      context: .
      dockerfile: aggregator/Dockerfile.aggregator
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-net
    restart: on-failure
    healthcheck:
      test: ["CMD", "python", "-c", "import confluent_kafka"]
      interval: 10s
      timeout: 10s
      retries: 15
      start_period: 30s
  analyzer:
    build:
      context: .
      dockerfile: analyzer/Dockerfile.analyzer
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-net
    restart: on-failure
    healthcheck:
      test: ["CMD", "python", "-c", "import confluent_kafka"]
      interval: 10s
      timeout: 10s
      retries: 15
      start_period: 30s
  visualizer:
    build:
      context: .
      dockerfile: visualizer/Dockerfile.visualizer
    ports:
      - "3000:3000"
      - "3001:3001"
    volumes:
      - ./data:/kafka-ticks-visualizer/data
      - ./logs:/logs
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-net
    restart: on-failure
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) }).on('error', () => process.exit(1));"]
      interval: 10s
      timeout: 10s
      retries: 15
      start_period: 30s
networks:
  kafka-net:
    driver: bridge
    name: kafka-net
volumes:
  kafka-data: